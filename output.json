{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":8,"numPassedTests":249,"numPendingTestSuites":1,"numPendingTests":113,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":10,"numTotalTests":363,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1662070542091,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"createFullName() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"createFullName() tests Should work with basic inputs","location":null,"status":"passed","title":"Should work with basic inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"createFullName() tests Should work with arbritrary inputs","location":null,"status":"passed","title":"Should work with arbritrary inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findSmallestNumber() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findSmallestNumber() tests Should return the smallest of two numbers","location":null,"status":"passed","title":"Should return the smallest of two numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findSmallestNumber() tests Should work regardless of order","location":null,"status":"passed","title":"Should work regardless of order"},{"ancestorTitles":[],"failureMessages":[],"fullName":"multiplyNumbers() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"multiplyNumbers() tests Should multiply 3 and 6 to make 18","location":null,"status":"passed","title":"Should multiply 3 and 6 to make 18"},{"ancestorTitles":[],"failureMessages":[],"fullName":"multiplyNumbers() tests Should multiply 12 and 6 to make 72","location":null,"status":"passed","title":"Should multiply 12 and 6 to make 72"},{"ancestorTitles":[],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if I beat the high score","location":null,"status":"passed","title":"Should tell me if I beat the high score"},{"ancestorTitles":[],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if the scores are the same","location":null,"status":"passed","title":"Should tell me if the scores are the same"},{"ancestorTitles":[],"failureMessages":[],"fullName":"checkIfNewHighScore() tests Should tell me if I don't beat the high score","location":null,"status":"passed","title":"Should tell me if I don't beat the high score"},{"ancestorTitles":[],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should return a string","location":null,"status":"passed","title":"Should return a string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"celsiusToFahrenheit() tests Should convert 15 C to 59 F","location":null,"status":"passed","title":"Should convert 15 C to 59 F"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should calculate the correct number if given 2 snickers, 25 years old and 90 years lifeExpectancy","location":null,"status":"passed","title":"Should calculate the correct number if given 2 snickers, 25 years old and 90 years lifeExpectancy"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateLifeTimeSupply() tests Should calculate the correct number if given 1 snickers, 20 years old and 70 years lifeExpectancy","location":null,"status":"passed","title":"Should calculate the correct number if given 1 snickers, 20 years old and 70 years lifeExpectancy"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'Score Unavailable' if given an incorrect score","location":null,"status":"passed","title":"Should return 'Score Unavailable' if given an incorrect score"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'A' for a score over 79","location":null,"status":"passed","title":"Should return 'A' for a score over 79"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'B' for a score between 79 - 70","location":null,"status":"passed","title":"Should return 'B' for a score between 79 - 70"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'C' for a score between 69 - 60","location":null,"status":"passed","title":"Should return 'C' for a score between 69 - 60"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'D' for a score between 59 - 50","location":null,"status":"passed","title":"Should return 'D' for a score between 59 - 50"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'E' for a score between 49 - 40","location":null,"status":"passed","title":"Should return 'E' for a score between 49 - 40"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getGrade() tests Should return 'F' for a score between 39 - 0","location":null,"status":"passed","title":"Should return 'F' for a score between 39 - 0"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should return a number","location":null,"status":"passed","title":"Should return a number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should have the answer to two decimal places","location":null,"status":"passed","title":"Should have the answer to two decimal places"},{"ancestorTitles":[],"failureMessages":[],"fullName":"calculateAreaOfCircle() tests Should return the correct number for a range of radii","location":null,"status":"passed","title":"Should return the correct number for a range of radii"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should have a return","location":null,"status":"passed","title":"Should have a return"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return a string","location":null,"status":"passed","title":"Should return a string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return 'My apologies NAME, there's been an error in processing your grade.' if a grade cannot be found","location":null,"status":"passed","title":"Should return 'My apologies NAME, there's been an error in processing your grade.' if a grade cannot be found"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score of over 79","location":null,"status":"passed","title":"Should return the correct summary for a score of over 79"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 79 - 70","location":null,"status":"passed","title":"Should return the correct summary for a score betweem 79 - 70"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 69 - 60","location":null,"status":"passed","title":"Should return the correct summary for a score betweem 69 - 60"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 59 - 50","location":null,"status":"passed","title":"Should return the correct summary for a score betweem 59 - 50"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 49 - 40","location":null,"status":"passed","title":"Should return the correct summary for a score betweem 49 - 40"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getStudentSummary() tests Should return the correct summary for a score betweem 39 - 0","location":null,"status":"passed","title":"Should return the correct summary for a score betweem 39 - 0"}],"endTime":1662070546073,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js2-functions-intro\\js2.test.js","startTime":1662070544112,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"getFurniturePrice() tests Should return the correct price","location":null,"status":"passed","title":"Should return the correct price"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should return an object","location":null,"status":"passed","title":"Should return an object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should add a property of location","location":null,"status":"passed","title":"Should add a property of location"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should still have all of the old properties","location":null,"status":"passed","title":"Should still have all of the old properties"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addFurnitureStorLocation() tests Should exactly match given object","location":null,"status":"passed","title":"Should exactly match given object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"makeSpaceship() tests Should return an object","location":null,"status":"passed","title":"Should return an object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"makeSpaceship() tests Should create an object with the provided arguments as values","location":null,"status":"passed","title":"Should create an object with the provided arguments as values"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setUserName() tests Should return and object","location":null,"status":"passed","title":"Should return and object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setUserName() tests Shouldn't change the username if one already exists","location":null,"status":"passed","title":"Shouldn't change the username if one already exists"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setUserName() tests Should change the username if none exists","location":null,"status":"passed","title":"Should change the username if none exists"},{"ancestorTitles":[],"failureMessages":[],"fullName":"splitFullNameToFirstAndLast() tests Should split up basic names","location":null,"status":"passed","title":"Should split up basic names"},{"ancestorTitles":[],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the eyeColour property","location":null,"status":"passed","title":"Should access the eyeColour property"},{"ancestorTitles":[],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the height property","location":null,"status":"passed","title":"Should access the height property"},{"ancestorTitles":[],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the name property","location":null,"status":"passed","title":"Should access the name property"},{"ancestorTitles":[],"failureMessages":[],"fullName":"accessGivenKey() tests Should access the likesIceCream property","location":null,"status":"passed","title":"Should access the likesIceCream property"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getUserAddress() tests Should be able to get the address from the user object","location":null,"status":"passed","title":"Should be able to get the address from the user object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include all allergens as safe if none present on the object allergies array","location":null,"status":"passed","title":"Should include all allergens as safe if none present on the object allergies array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include no allergens if all are found on the customer object","location":null,"status":"passed","title":"Should include no allergens if all are found on the customer object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setSafeAllergens() tests Should include some allergens if some are present on customer allergen list","location":null,"status":"passed","title":"Should include some allergens if some are present on customer allergen list"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mergeFurniture() tests Should return an object which has a combination of both keys","location":null,"status":"passed","title":"Should return an object which has a combination of both keys"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mergeFurniture() tests Should not modify the original object","location":null,"status":"passed","title":"Should not modify the original object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mergeFurniture() tests Should return an object which has the exact key value pairs of both objects","location":null,"status":"passed","title":"Should return an object which has the exact key value pairs of both objects"}],"endTime":1662070546080,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js6-objects\\js6.test.js","startTime":1662070544111,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"John\u001b[7m Smith\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"John\"\u001b[39m\n    at Object.<anonymous> (C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js1-types-and-control-flow\\js1.test.js:17:28)\n    at Object.asyncJestTest (C:\\Users\\laila\\Documents\\Nology\\js-challenges\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\laila\\Documents\\Nology\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\laila\\Documents\\Nology\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\laila\\Documents\\Nology\\js-challenges\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"createFullName() tests","location":null,"status":"failed","title":"createFullName() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findLargestNumber() tests","location":null,"status":"passed","title":"findLargestNumber() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"addNumbers() tests","location":null,"status":"passed","title":"addNumbers() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findLengthOfPassword() tests","location":null,"status":"passed","title":"findLengthOfPassword() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findType() tests","location":null,"status":"passed","title":"findType() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getIsValidOnNameTag() tests","location":null,"status":"passed","title":"getIsValidOnNameTag() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"convertStringToNumber() tests","location":null,"status":"passed","title":"convertStringToNumber() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getHasUppercaseLetters() tests","location":null,"status":"passed","title":"getHasUppercaseLetters() tests"},{"ancestorTitles":[],"failureMessages":[],"fullName":"convertPascalCaseToSnakeCase() tests","location":null,"status":"passed","title":"convertPascalCaseToSnakeCase() tests"}],"endTime":1662070546089,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcreateFullName() tests\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"John\u001b[7m Smith\u001b[27m\"\u001b[39m\n    Received: \u001b[31m\"John\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 | \u001b[39mtest(\u001b[32m\"createFullName() tests\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 16 | \u001b[39m  expect(createFullName())\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 | \u001b[39m  expect(createFullName())\u001b[33m.\u001b[39mtoBe(\u001b[32m\"John Smith\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39mtest(\u001b[32m\"findLargestNumber() tests\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/js1-types-and-control-flow/js1.test.js\u001b[39m\u001b[0m\u001b[2m:17:28)\u001b[22m\u001b[2m\u001b[22m\n","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js1-types-and-control-flow\\js1.test.js","startTime":1662070544167,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createRecipeString() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createRecipeString() Should return a String","location":null,"status":"passed","title":"Should return a String"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createRecipeString() Should handle multiple inputs","location":null,"status":"passed","title":"Should handle multiple inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createRecipeString() Should handle a single item","location":null,"status":"passed","title":"Should handle a single item"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should return an Array ","location":null,"status":"passed","title":"Should return an Array "},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing getFirstAndLastItems() Should handle multiple inputs","location":null,"status":"passed","title":"Should handle multiple inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScores() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScores() Should return a Number","location":null,"status":"passed","title":"Should return a Number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScores() Should handle single input","location":null,"status":"passed","title":"Should handle single input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScores() Should handle multiple inputs","location":null,"status":"passed","title":"Should handle multiple inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalRange() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalRange() Should return a Number ","location":null,"status":"passed","title":"Should return a Number "},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalRange() Should Total up the range of numbers","location":null,"status":"passed","title":"Should Total up the range of numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalRange() Should Total larger numbers","location":null,"status":"passed","title":"Should Total larger numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should return an Array ","location":null,"status":"passed","title":"Should return an Array "},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing moveFirstAndLastItems() Should handle multiple inputs","location":null,"status":"passed","title":"Should handle multiple inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should return an Array ","location":null,"status":"passed","title":"Should return an Array "},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from array","location":null,"status":"passed","title":"Should remove even numbers from array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from a small array","location":null,"status":"passed","title":"Should remove even numbers from a small array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should remove even numbers from a large array","location":null,"status":"passed","title":"Should remove even numbers from a large array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeEvenNumbers() Should return a new array","location":null,"status":"passed","title":"Should return a new array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should return a Number","location":null,"status":"passed","title":"Should return a Number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should calculate the average of different numbers","location":null,"status":"passed","title":"Should calculate the average of different numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should calculate the average of same numbers","location":null,"status":"passed","title":"Should calculate the average of same numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateAverage() Should handle an empty array","location":null,"status":"passed","title":"Should handle an empty array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should return an Array","location":null,"status":"passed","title":"Should return an Array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should not change a single item array","location":null,"status":"passed","title":"Should not change a single item array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should return multiple item Array Reversed","location":null,"status":"passed","title":"Should return multiple item Array Reversed"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseOrder() Should return a new array","location":null,"status":"passed","title":"Should return a new array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should be defined","location":null,"status":"passed","title":"Should be defined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should return an Array with correct params","location":null,"status":"passed","title":"Should return an Array with correct params"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should return String with incorrect params","location":null,"status":"passed","title":"Should return String with incorrect params"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should format arrays with valid parameters","location":null,"status":"passed","title":"Should format arrays with valid parameters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should not lose any players","location":null,"status":"passed","title":"Should not lose any players"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should catch invalid parameters.","location":null,"status":"passed","title":"Should catch invalid parameters."},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing generateHighscores() Should return a new Array","location":null,"status":"passed","title":"Should return a new Array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should NOT return undefined","location":null,"status":"passed","title":"Should NOT return undefined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should return a String","location":null,"status":"passed","title":"Should return a String"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should NOT encrypt three letters","location":null,"status":"passed","title":"Should NOT encrypt three letters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt after three plus letters","location":null,"status":"passed","title":"Should encrypt after three plus letters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt large words","location":null,"status":"passed","title":"Should encrypt large words"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should keep spaces between words","location":null,"status":"passed","title":"Should keep spaces between words"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should handle empty input","location":null,"status":"passed","title":"Should handle empty input"}],"endTime":1662070546115,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js3-arrays-and-for-loops\\js3.test.js","startTime":1662070544106,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"getData() tests Fetch should have been called once","location":null,"status":"passed","title":"Fetch should have been called once"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getData() tests Should return the data","location":null,"status":"passed","title":"Should return the data"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getNames() tests Fetch should have been called once","location":null,"status":"passed","title":"Fetch should have been called once"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getNames() tests Should return an array of names","location":null,"status":"passed","title":"Should return an array of names"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getEmployedPeople() tests Fetch should have been called once","location":null,"status":"passed","title":"Fetch should have been called once"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getEmployedPeople() tests Should return an array of employed people objects","location":null,"status":"passed","title":"Should return an array of employed people objects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findPersonWithId() tests Should return a single object","location":null,"status":"passed","title":"Should return a single object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findPersonWithId() tests Should return a person with the id of 001","location":null,"status":"passed","title":"Should return a person with the id of 001"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findPersonWithId() tests Should return a person with the id of 005","location":null,"status":"passed","title":"Should return a person with the id of 005"},{"ancestorTitles":[],"failureMessages":[],"fullName":"findPersonWithId() tests Should return a message of 'Person not found' when no person has a matching ID","location":null,"status":"passed","title":"Should return a message of 'Person not found' when no person has a matching ID"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getPeopleWithMatchingInterests() tests Should return an array if interests are found","location":null,"status":"passed","title":"Should return an array if interests are found"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getPeopleWithMatchingInterests() tests Should return all people with a matching interest (swimming)","location":null,"status":"passed","title":"Should return all people with a matching interest (swimming)"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getPeopleWithMatchingInterests() tests Should return all people with a matching interest (mma)","location":null,"status":"passed","title":"Should return all people with a matching interest (mma)"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getPeopleWithMatchingInterests() tests Should return 'No people with interest found' if no matching interests on people","location":null,"status":"passed","title":"Should return 'No people with interest found' if no matching interests on people"},{"ancestorTitles":["setDescription() tests"],"failureMessages":[],"fullName":"setDescription() tests Should not modify original data","location":null,"status":"pending","title":"Should not modify original data"},{"ancestorTitles":["setDescription() tests"],"failureMessages":[],"fullName":"setDescription() tests Should add a description key","location":null,"status":"pending","title":"Should add a description key"},{"ancestorTitles":["setDescription() tests"],"failureMessages":[],"fullName":"setDescription() tests Should add accurate description to each object","location":null,"status":"pending","title":"Should add accurate description to each object"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":[],"fullName":"setInterestDetails() tests should call fetch twice","location":null,"status":"pending","title":"should call fetch twice"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":[],"fullName":"setInterestDetails() tests Should not modify original data","location":null,"status":"pending","title":"Should not modify original data"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":[],"fullName":"setInterestDetails() tests Should turn the interests key into an array of objects","location":null,"status":"pending","title":"Should turn the interests key into an array of objects"},{"ancestorTitles":["setInterestDetails() tests"],"failureMessages":[],"fullName":"setInterestDetails() tests Should match the exact dummy array of objects","location":null,"status":"pending","title":"Should match the exact dummy array of objects"}],"endTime":1662070546162,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js9-apis-and-fetch\\js9.test.js","startTime":1662070544175,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return correct string","location":null,"status":"passed","title":"Should return correct string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should add two numbers together","location":null,"status":"passed","title":"Should add two numbers together"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return string based on which number is larger","location":null,"status":"passed","title":"Should return string based on which number is larger"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should return new array of names based on length","location":null,"status":"passed","title":"Should return new array of names based on length"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Should reduce all numbers correctly","location":null,"status":"passed","title":"Should reduce all numbers correctly"}],"endTime":1662070546165,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js11-unit-testing\\solution.test.js","startTime":1662070544186,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Foundation level challenges"],"failureMessages":[],"fullName":"Foundation level challenges getEmployeeQuotes() tests Should return an array of just the quote from the data provided","location":null,"status":"passed","title":"Should return an array of just the quote from the data provided"},{"ancestorTitles":["Foundation level challenges"],"failureMessages":[],"fullName":"Foundation level challenges getTheManagers() tests Should return an array containing only employees where isManagement is true","location":null,"status":"passed","title":"Should return an array containing only employees where isManagement is true"},{"ancestorTitles":["Foundation level challenges"],"failureMessages":[],"fullName":"Foundation level challenges getNumberOfKeys() tests Should return a number","location":null,"status":"passed","title":"Should return a number"},{"ancestorTitles":["Foundation level challenges"],"failureMessages":[],"fullName":"Foundation level challenges getNumberOfKeys() tests Should accurately count the number of keys","location":null,"status":"passed","title":"Should accurately count the number of keys"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges findMostExpensiveItem() tests Should return a single object","location":null,"status":"passed","title":"Should return a single object"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges findMostExpensiveItem() tests Should return the most expensive item which is a hoodie","location":null,"status":"passed","title":"Should return the most expensive item which is a hoodie"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should not modify original array of objects","location":null,"status":"passed","title":"Should not modify original array of objects"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should add a totalPrice key to each object","location":null,"status":"passed","title":"Should add a totalPrice key to each object"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges settotalPrice() tests Should accurately total each shopping item","location":null,"status":"passed","title":"Should accurately total each shopping item"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges totalShoppingBasket() tests Should return a number","location":null,"status":"passed","title":"Should return a number"},{"ancestorTitles":["Intermediate level challenges"],"failureMessages":[],"fullName":"Intermediate level challenges totalShoppingBasket() tests Should accurately total all objects","location":null,"status":"passed","title":"Should accurately total all objects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getImportantKeys() tests Should not modify the original array","location":null,"status":"passed","title":"Should not modify the original array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getImportantKeys() tests Should remove unneeded keys from the objects","location":null,"status":"passed","title":"Should remove unneeded keys from the objects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"getImportantKeys() tests Should alter every item in the array","location":null,"status":"passed","title":"Should alter every item in the array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setImportantKeys() tests Should not modify the original array","location":null,"status":"passed","title":"Should not modify the original array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setImportantKeys() tests Should add missing keys","location":null,"status":"passed","title":"Should add missing keys"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setImportantKeys() tests should not modify existing values","location":null,"status":"passed","title":"should not modify existing values"},{"ancestorTitles":[],"failureMessages":[],"fullName":"setImportantKeys() tests Should match this exact array of objects","location":null,"status":"passed","title":"Should match this exact array of objects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should not mutate the original array","location":null,"status":"passed","title":"Should not mutate the original array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should remove old keys","location":null,"status":"passed","title":"Should remove old keys"},{"ancestorTitles":[],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should rename keys","location":null,"status":"passed","title":"Should rename keys"},{"ancestorTitles":[],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should add an array for the ingredients","location":null,"status":"passed","title":"Should add an array for the ingredients"},{"ancestorTitles":[],"failureMessages":[],"fullName":"cleanCocktailResponseData() tests Should match given structure","location":null,"status":"passed","title":"Should match given structure"}],"endTime":1662070546197,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js8-complex-data-types\\js8.test.js","startTime":1662070544172,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeFalseValues() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeFalseValues() Should return an array of Booleans","location":null,"status":"passed","title":"Should return an array of Booleans"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeFalseValues() Should remove false values from an array","location":null,"status":"passed","title":"Should remove false values from an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing removeFalseValues() Should have the same amount of true values as the orginal array","location":null,"status":"passed","title":"Should have the same amount of true values as the orginal array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createPercentageList() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createPercentageList() Should return an array of Strings","location":null,"status":"passed","title":"Should return an array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createPercentageList() Should convert numbers into percentages","location":null,"status":"passed","title":"Should convert numbers into percentages"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createPercentageList() Should match given array's length","location":null,"status":"passed","title":"Should match given array's length"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should return an array of Strings","location":null,"status":"passed","title":"Should return an array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should prefix name as expected","location":null,"status":"passed","title":"Should prefix name as expected"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createListOfPoessessions() Should match given Array's length","location":null,"status":"passed","title":"Should match given Array's length"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should return an array of Numbers","location":null,"status":"passed","title":"Should return an array of Numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should convert string as expected","location":null,"status":"passed","title":"Should convert string as expected"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should handle big inputs","location":null,"status":"passed","title":"Should handle big inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing convertStringToNumbersArray() Should handle single inputs","location":null,"status":"passed","title":"Should handle single inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should return an array of Strings","location":null,"status":"passed","title":"Should return an array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should convert string as expected","location":null,"status":"passed","title":"Should convert string as expected"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should handle big inputs","location":null,"status":"passed","title":"Should handle big inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing createOddEvenArray() Should handle single inputs","location":null,"status":"passed","title":"Should handle single inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should return an array of Strings","location":null,"status":"passed","title":"Should return an array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle one match","location":null,"status":"passed","title":"Should handle one match"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle multiple matches","location":null,"status":"passed","title":"Should handle multiple matches"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle large matches","location":null,"status":"passed","title":"Should handle large matches"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle single character matches","location":null,"status":"passed","title":"Should handle single character matches"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing filterBooksBySearch() Should handle no matches","location":null,"status":"passed","title":"Should handle no matches"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should return a String","location":null,"status":"pending","title":"Should return a String"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should remove whitespace","location":null,"status":"pending","title":"Should remove whitespace"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should be lowercase","location":null,"status":"pending","title":"Should be lowercase"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should format a single string as expected","location":null,"status":"pending","title":"Should format a single string as expected"},{"ancestorTitles":["Testing formatStringArray()"],"failureMessages":[],"fullName":"Testing formatStringArray() Should format multiple strings as expected","location":null,"status":"pending","title":"Should format multiple strings as expected"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should NOT return undefined","location":null,"status":"pending","title":"Should NOT return undefined"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should return an array","location":null,"status":"pending","title":"Should return an array"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should return an array of Strings","location":null,"status":"pending","title":"Should return an array of Strings"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove numbers","location":null,"status":"pending","title":"Should remove numbers"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove punctuation","location":null,"status":"pending","title":"Should remove punctuation"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should remove whitespace","location":null,"status":"pending","title":"Should remove whitespace"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should uppercase even index","location":null,"status":"pending","title":"Should uppercase even index"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should lowercase odd index","location":null,"status":"pending","title":"Should lowercase odd index"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should format string as expected","location":null,"status":"pending","title":"Should format string as expected"},{"ancestorTitles":["Testing formatString()"],"failureMessages":[],"fullName":"Testing formatString() Should handle empty input","location":null,"status":"pending","title":"Should handle empty input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should NOT return undefined","location":null,"status":"passed","title":"Should NOT return undefined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should return an array","location":null,"status":"passed","title":"Should return an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should return an array of Strings","location":null,"status":"passed","title":"Should return an array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of Fizz","location":null,"status":"passed","title":"Should have the correct amount of Fizz"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have Fizz in the correct index","location":null,"status":"passed","title":"Should have Fizz in the correct index"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of Buzz","location":null,"status":"passed","title":"Should have the correct amount of Buzz"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have Buzz in the correct index","location":null,"status":"passed","title":"Should have Buzz in the correct index"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have the correct amount of FizzBuzz","location":null,"status":"passed","title":"Should have the correct amount of FizzBuzz"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should have FizzBuzz in the correct index","location":null,"status":"passed","title":"Should have FizzBuzz in the correct index"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should NOT alter the length of a clean input","location":null,"status":"passed","title":"Should NOT alter the length of a clean input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should fizzBuzz a a clean array of numbers as strings as expected","location":null,"status":"passed","title":"Should fizzBuzz a a clean array of numbers as strings as expected"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should  NOT alter the length of a clean array of numbers as strings","location":null,"status":"passed","title":"Should  NOT alter the length of a clean array of numbers as strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should fizzBuzz a mixed input as expected","location":null,"status":"passed","title":"Should fizzBuzz a mixed input as expected"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing fizzBuzz() Should alter the length of a mixed input","location":null,"status":"passed","title":"Should alter the length of a mixed input"}],"endTime":1662070546205,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js4-array-iterators\\js4.test.js","startTime":1662070544168,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScoresArr() Should return a Number","location":null,"status":"passed","title":"Should return a Number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalScoresArr() Should total numbers","location":null,"status":"passed","title":"Should total numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseString() Should return a String","location":null,"status":"passed","title":"Should return a String"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseString() Should not alter a single letter","location":null,"status":"passed","title":"Should not alter a single letter"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseString() Should be the same size as input","location":null,"status":"passed","title":"Should be the same size as input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing reverseString() Should reverse a String","location":null,"status":"passed","title":"Should reverse a String"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should return an Array","location":null,"status":"passed","title":"Should return an Array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should return an Array of Strings","location":null,"status":"passed","title":"Should return an Array of Strings"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort lowercase letters alphabetically","location":null,"status":"passed","title":"Should sort lowercase letters alphabetically"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort uppercase letters alphabetically","location":null,"status":"passed","title":"Should sort uppercase letters alphabetically"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should sort Uppercase and lowercase characters","location":null,"status":"passed","title":"Should sort Uppercase and lowercase characters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortCharactersAlphabetically() Should be the same length as the input","location":null,"status":"passed","title":"Should be the same length as the input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should return an Array","location":null,"status":"passed","title":"Should return an Array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should return an Array of Numbers","location":null,"status":"passed","title":"Should return an Array of Numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should not alter single numbers","location":null,"status":"passed","title":"Should not alter single numbers"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should sort multiple numbers high to low","location":null,"status":"passed","title":"Should sort multiple numbers high to low"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should not alter already sorted array's","location":null,"status":"passed","title":"Should not alter already sorted array's"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing sortNumbersHighToLow() Should have the same length as input","location":null,"status":"passed","title":"Should have the same length as input"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkItemInstock() Should return a String","location":null,"status":"passed","title":"Should return a String"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle single items from the stock list","location":null,"status":"passed","title":"Should handle single items from the stock list"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle single no match items","location":null,"status":"passed","title":"Should handle single no match items"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkItemInstock() Should handle every item in the stock list","location":null,"status":"passed","title":"Should handle every item in the stock list"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return a Boolean","location":null,"status":"passed","title":"Should return a Boolean"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return true if all are primary","location":null,"status":"passed","title":"Should return true if all are primary"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should return false if all aren't primary","location":null,"status":"passed","title":"Should return false if all aren't primary"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkPrimaryColours() Should handle large inputs","location":null,"status":"passed","title":"Should handle large inputs"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return a Boolean","location":null,"status":"passed","title":"Should return a Boolean"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return true for a palindrome","location":null,"status":"passed","title":"Should return true for a palindrome"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return false for a string","location":null,"status":"passed","title":"Should return false for a string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return true for a palindrome with spaces","location":null,"status":"passed","title":"Should return true for a palindrome with spaces"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing checkStringPalindrome() Should return false for a string with spaces","location":null,"status":"passed","title":"Should return false for a string with spaces"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return an Array","location":null,"status":"passed","title":"Should return an Array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return array of numbers ","location":null,"status":"passed","title":"Should return array of numbers "},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should total nested array of scores","location":null,"status":"passed","title":"Should total nested array of scores"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should not alter single scores","location":null,"status":"passed","title":"Should not alter single scores"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing totalNestedScoresArr() Should return a new array and not modify the old one","location":null,"status":"passed","title":"Should return a new array and not modify the old one"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should return a string","location":null,"status":"passed","title":"Should return a string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should NOT encrypt three letters","location":null,"status":"passed","title":"Should NOT encrypt three letters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt after three plus letters","location":null,"status":"passed","title":"Should encrypt after three plus letters"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should encrypt large words","location":null,"status":"passed","title":"Should encrypt large words"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should keep spaces between words","location":null,"status":"passed","title":"Should keep spaces between words"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Testing encryptString() Should handle empty input","location":null,"status":"passed","title":"Should handle empty input"}],"endTime":1662070546199,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js5-arrays-iterators-part-2\\js5.test.js","startTime":1662070544224,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should have xCoord key","location":null,"status":"pending","title":"Should have xCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should have yCoord key","location":null,"status":"pending","title":"Should have yCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should have the correct value for xCoord key","location":null,"status":"pending","title":"Should have the correct value for xCoord key"},{"ancestorTitles":["Testing Coordinate class"],"failureMessages":[],"fullName":"Testing Coordinate class Should have the correct value for yCoord key","location":null,"status":"pending","title":"Should have the correct value for yCoord key"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should have a message key","location":null,"status":"pending","title":"Should have a message key"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should have a printMessage function","location":null,"status":"pending","title":"Should have a printMessage function"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should return a string when the printMessage method is called","location":null,"status":"pending","title":"Should return a string when the printMessage method is called"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should return a correctly formatted string when the printMessage method is called","location":null,"status":"pending","title":"Should return a correctly formatted string when the printMessage method is called"},{"ancestorTitles":["Testing Alert class"],"failureMessages":[],"fullName":"Testing Alert class Should not alter message key after method is called","location":null,"status":"pending","title":"Should not alter message key after method is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should have a htmlRef key","location":null,"status":"pending","title":"Should have a htmlRef key"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should have a displayLoader and removeLoader methods","location":null,"status":"pending","title":"Should have a displayLoader and removeLoader methods"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should add the correct html to the html reference when displayLoader() is called","location":null,"status":"pending","title":"Should add the correct html to the html reference when displayLoader() is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should add the correct html to the html reference when displayLoader() is called multiple times","location":null,"status":"pending","title":"Should add the correct html to the html reference when displayLoader() is called multiple times"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should set innerHTML of html reference to an empty string removeLoader() is called","location":null,"status":"pending","title":"Should set innerHTML of html reference to an empty string removeLoader() is called"},{"ancestorTitles":["Testing Loader class"],"failureMessages":[],"fullName":"Testing Loader class Should remove html from the html reference when displayLoader() and then removeLoader() is called","location":null,"status":"pending","title":"Should remove html from the html reference when displayLoader() and then removeLoader() is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a count key","location":null,"status":"pending","title":"Should have a count key"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have correct count when initialised","location":null,"status":"pending","title":"Should have correct count when initialised"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a increment function","location":null,"status":"pending","title":"Should have a increment function"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should return a number when the increment method is called","location":null,"status":"pending","title":"Should return a number when the increment method is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should increment count by 1","location":null,"status":"pending","title":"Should increment count by 1"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should increment count by 1 100 times","location":null,"status":"pending","title":"Should increment count by 1 100 times"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should have a decrement function","location":null,"status":"pending","title":"Should have a decrement function"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should return a number when the decrement method is called","location":null,"status":"pending","title":"Should return a number when the decrement method is called"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should decrement count by 1","location":null,"status":"pending","title":"Should decrement count by 1"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should decrement count by 1 100 times","location":null,"status":"pending","title":"Should decrement count by 1 100 times"},{"ancestorTitles":["Testing Counter class"],"failureMessages":[],"fullName":"Testing Counter class Should not decrement below 0","location":null,"status":"pending","title":"Should not decrement below 0"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a engineIsRunning key","location":null,"status":"pending","title":"Should have a engineIsRunning key"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to false by default","location":null,"status":"pending","title":"Should set engineIsRunning to false by default"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a startEngine function","location":null,"status":"pending","title":"Should have a startEngine function"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return a string when the startEngine method is called","location":null,"status":"pending","title":"Should return a string when the startEngine method is called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when startEngine() is called and engineIsRunning is false","location":null,"status":"pending","title":"Should return the correct string when startEngine() is called and engineIsRunning is false"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to true after startEngine() has been called","location":null,"status":"pending","title":"Should set engineIsRunning to true after startEngine() has been called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when startEngine() is called and engineIsRunning is true","location":null,"status":"pending","title":"Should return the correct string when startEngine() is called and engineIsRunning is true"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should have a stopEngine function","location":null,"status":"pending","title":"Should have a stopEngine function"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return a string when the stopEngine method is called","location":null,"status":"pending","title":"Should return a string when the stopEngine method is called"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when stopEngine() is called and engineIsRunning is false","location":null,"status":"pending","title":"Should return the correct string when stopEngine() is called and engineIsRunning is false"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should return the correct string when stopEngine() is called and engineIsRunning is true","location":null,"status":"pending","title":"Should return the correct string when stopEngine() is called and engineIsRunning is true"},{"ancestorTitles":["Testing Engine class"],"failureMessages":[],"fullName":"Testing Engine class Should set engineIsRunning to false after startEngine() and stopEngine() have been called","location":null,"status":"pending","title":"Should set engineIsRunning to false after startEngine() and stopEngine() have been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have htmlRef, title and message keys","location":null,"status":"pending","title":"Should have htmlRef, title and message keys"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have correct values assigned to the keys","location":null,"status":"pending","title":"Should have correct values assigned to the keys"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should have renderHtml and toggleModalfunctions","location":null,"status":"pending","title":"Should have renderHtml and toggleModalfunctions"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the innerHTML of the htmlRefernce after renderHtml() has been called","location":null,"status":"pending","title":"Should update the innerHTML of the htmlRefernce after renderHtml() has been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the innerHTML of the htmlRefernce dynamically after renderHtml() has been called","location":null,"status":"pending","title":"Should update the innerHTML of the htmlRefernce dynamically after renderHtml() has been called"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList of the htmlRefernce - remove hide","location":null,"status":"pending","title":"Should update the classList of the htmlRefernce - remove hide"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList of the htmlRefernce - add hide","location":null,"status":"pending","title":"Should update the classList of the htmlRefernce - add hide"},{"ancestorTitles":["Testing Modal class"],"failureMessages":[],"fullName":"Testing Modal class Should update the classList with the string of hide","location":null,"status":"pending","title":"Should update the classList with the string of hide"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should have a _shelfId and a _booksOnShelf key","location":null,"status":"pending","title":"Should have a _shelfId and a _booksOnShelf key"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should set _booksOnShelf to [] by default","location":null,"status":"pending","title":"Should set _booksOnShelf to [] by default"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should have the getters and setters","location":null,"status":"pending","title":"Should have the getters and setters"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should return the _booksOnShelf written as a getter","location":null,"status":"pending","title":"Should return the _booksOnShelf written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should update the _booksOnShelf written as a setter","location":null,"status":"pending","title":"Should update the _booksOnShelf written as a setter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should return the latestBook written as a getter","location":null,"status":"pending","title":"Should return the latestBook written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should update using a setter and return the latestBook written as a getter","location":null,"status":"pending","title":"Should update using a setter and return the latestBook written as a getter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should Error if latestBook is attempted to be assigned","location":null,"status":"pending","title":"Should Error if latestBook is attempted to be assigned"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should add a new book to the bookshelf written as a setter","location":null,"status":"pending","title":"Should add a new book to the bookshelf written as a setter"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should handle multiple books being added to the shelf","location":null,"status":"pending","title":"Should handle multiple books being added to the shelf"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should match last item when multiple books have been added","location":null,"status":"pending","title":"Should match last item when multiple books have been added"},{"ancestorTitles":["Testing BookShelf class"],"failureMessages":[],"fullName":"Testing BookShelf class Should add a new book to the END of bookshelf written as a setter","location":null,"status":"pending","title":"Should add a new book to the END of bookshelf written as a setter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be an object","location":null,"status":"pending","title":"Should be an object"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a name and email key","location":null,"status":"pending","title":"Should have a name and email key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the correct name and email value","location":null,"status":"pending","title":"Should have the correct name and email value"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a private _balance key","location":null,"status":"pending","title":"Should have a private _balance key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the correct value on the _balance key","location":null,"status":"pending","title":"Should have the correct value on the _balance key"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should set _balance key to 0 by default","location":null,"status":"pending","title":"Should set _balance key to 0 by default"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have the balance getter","location":null,"status":"pending","title":"Should have the balance getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should return the _balance written as a getter","location":null,"status":"pending","title":"Should return the _balance written as a getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should return a new _balance written as a getter","location":null,"status":"pending","title":"Should return a new _balance written as a getter"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should Error if balance is attempted to be assigned","location":null,"status":"pending","title":"Should Error if balance is attempted to be assigned"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a deposit method","location":null,"status":"pending","title":"Should have a deposit method"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit (number) should recieve the updated balance when deposit() is called","location":null,"status":"pending","title":"Should be able to make a valid deposit (number) should recieve the updated balance when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit ('number') should recieve the updated balance when deposit() is called","location":null,"status":"pending","title":"Should be able to make a valid deposit ('number') should recieve the updated balance when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make a INVALID deposit should recieve formatted string when deposit() is called","location":null,"status":"pending","title":"Should NOT be able to make a INVALID deposit should recieve formatted string when deposit() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid deposit (number) and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make a valid deposit (number) and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make multiple deposits and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make multiple deposits and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should have a withdraw method","location":null,"status":"pending","title":"Should have a withdraw method"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdrawal (number) should recieve the updated balance when withdraw() is called","location":null,"status":"pending","title":"Should be able to make a valid withdrawal (number) should recieve the updated balance when withdraw() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdrawal ('number') should recieve the updated balance when withdraw() is called","location":null,"status":"pending","title":"Should be able to make a valid withdrawal ('number') should recieve the updated balance when withdraw() is called"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make a valid withdraw (number) and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make a valid withdraw (number) and check the balance afterwards"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make a INVALID withdrawal should recieve formatted string","location":null,"status":"pending","title":"Should NOT be able to make a INVALID withdrawal should recieve formatted string"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT be able to make withdraw more then the current balance","location":null,"status":"pending","title":"Should NOT be able to make withdraw more then the current balance"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT change the balance after INVALID withdrawals","location":null,"status":"pending","title":"Should NOT change the balance after INVALID withdrawals"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should NOT go below zero","location":null,"status":"pending","title":"Should NOT go below zero"},{"ancestorTitles":["Testing BankAccount class"],"failureMessages":[],"fullName":"Testing BankAccount class Should be able to make multiple withdrawals and check the balance afterwards","location":null,"status":"pending","title":"Should be able to make multiple withdrawals and check the balance afterwards"}],"endTime":1662070546230,"message":"","name":"C:\\Users\\laila\\Documents\\Nology\\js-challenges\\src\\js7-classes\\js7.test.js","startTime":1662070544197,"status":"passed","summary":""}],"wasInterrupted":false}